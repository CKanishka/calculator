{"version":3,"sources":["App.js","components/Output.js","components/InputKeys.js","serviceWorker.js","index.js"],"names":["App","state","answer","toggle","togglelimit","onClick","button_name","setState","substring","length","find_answer","console","log","expression","c","i","charAt","final_result","eval","Number","isInteger","toFixed","Math","ceil","log10","toExponential","e","className","this","Component","Output","InputKeys","name","props","target","style","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.04347640.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Output from './components/Output';\nimport InputKeys from './components/InputKeys';\nimport './App.css';\n\nclass App extends Component {\n  state={\n      answer:\"\",\n      toggle:false,\n      togglelimit:false\n  }\n\n  onClick=(button_name)=>{\n      if(button_name === \"C\"){\n          this.setState({answer: \"\",toggle:false})\n      }\n      else if(button_name === \"CE\"){\n          this.setState({answer:this.state.answer.substring(0,this.state.answer.length-1)})\n      }\n      else if(button_name === \"=\"){\n          this.find_answer()\n      }\n      else{\n          if(this.state.toggle===true){\n            this.setState({answer:'',toggle:false},()=>this.setState({answer:this.state.answer+button_name}))\n          }\n          else{\n              this.setState({answer:this.state.answer+button_name})\n          }\n      }\n      console.log(\"CLicked\")\n  }\n  find_answer = () => {\n    try {\n        var expression=\"\"\n        //taking care of leading zeroes\n        for (var c of this.state.answer) {\n            var i=0\n            if(c===\"0\" && (i===0 || !((expression.charAt(expression.length-1)>=\"0\")&&(expression.charAt(expression.length-1)<=\"9\")))){\n                continue\n            }\n            else{\n                expression=expression+c\n            }\n            i=i+1\n          }\n        // eslint-disable-next-line\n        var final_result=eval(expression) \n        //number of digits to show after decimal\n        if(!Number.isInteger(final_result)){\n            final_result=final_result.toFixed(3)\n        } \n        //converting a large number to exponentialform\n        if(Math.ceil(Math.log10(final_result + 1))>=11){\n            final_result=final_result.toExponential(3)\n        }\n        \n        this.setState({\n            // eslint-disable-next-line\n            answer:final_result,\n            toggle:true\n        })\n    } catch (e) {\n        this.setState({\n            answer: \"error\",\n            toggle:true\n        })\n\n    }\n  } \n    render(){\n    return (\n        <div className=\"App\">\n         <div className=\"calculator_container\">\n         <Output answer={this.state.answer}/> \n         <InputKeys onClick={this.onClick}/>\n         </div>\n        </div>\n      );\n  }\n  \n}\n\nexport default App;\n","import React from 'react';\n\n\nconst Output = ({answer}) => (\n    <div className=\"output\">\n      {answer}\n    </div>\n  );\n\nexport default Output;","import React, {Component} from 'react';\n\nclass InputKeys extends Component {\n\n    render() {\n        return (\n            <div className=\"key_container\">\n                <button name=\"1\" onClick={e => this.props.onClick(e.target.name)}>1</button>\n                <button name=\"2\" onClick={e => this.props.onClick(e.target.name)}>2</button>\n                <button name=\"3\" onClick={e => this.props.onClick(e.target.name)}>3</button>\n                <button style={{backgroundColor:\"#0e82f5\"}} name=\"C\" onClick={e => this.props.onClick(e.target.name)}>C</button><br/>\n\n\n                <button name=\"4\" onClick={e => this.props.onClick(e.target.name)}>4</button>\n                <button name=\"5\" onClick={e => this.props.onClick(e.target.name)}>5</button>\n                <button name=\"6\" onClick={e => this.props.onClick(e.target.name)}>6</button>\n                <button style={{backgroundColor:\"#0e6ece\"}} name=\"+\" onClick={e => this.props.onClick(e.target.name)}>+</button><br/>\n\n\n                <button name=\"7\" onClick={e => this.props.onClick(e.target.name)}>7</button>\n                <button name=\"8\" onClick={e => this.props.onClick(e.target.name)}>8</button>\n                <button name=\"9\" onClick={e => this.props.onClick(e.target.name)}>9</button>\n                <button style={{backgroundColor:\"#0e82f5\"}} name=\"-\" onClick={e => this.props.onClick(e.target.name)}>-</button><br/>\n\n                <button name=\".\" onClick={e => this.props.onClick(e.target.name)}>.</button>\n                <button name=\"0\" onClick={e => this.props.onClick(e.target.name)}>0</button>\n                <button style={{backgroundColor:\"#0e82f5\"}} name=\"CE\" onClick={e => this.props.onClick(e.target.name)}>CE</button>\n                <button style={{backgroundColor:\"#0e6ece\"}} name=\"*\" onClick={e => this.props.onClick(e.target.name)}>x</button><br/>\n\n\n                <button name=\"(\" onClick={e => this.props.onClick(e.target.name)}>(</button>\n                <button name=\")\" onClick={e => this.props.onClick(e.target.name)}>)</button>\n                <button style={{backgroundColor:\"#0e6ece\"}} name=\"=\" onClick={e => this.props.onClick(e.target.name)}>=</button>\n                <button style={{backgroundColor:\"#0e82f5\"}} name=\"/\" onClick={e => this.props.onClick(e.target.name)}>รท</button><br/>\n            </div>\n        );\n    }\n}\n\n\nexport default InputKeys;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}